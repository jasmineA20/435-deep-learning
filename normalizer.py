{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6c943e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import autograd.numpy as np\n",
    "\n",
    "class Setup:\n",
    "    def __init__(self,x,name):\n",
    "        normalizer = 0\n",
    "        inverse_normalizer = 0\n",
    "        \n",
    "        # use standard normalizer\n",
    "        if name == 'standard':\n",
    "            self.normalizer, self.inverse_normalizer = self.standard_normalizer(x)\n",
    "            \n",
    "        # use PCA sphereing\n",
    "        elif name == 'PCA_sphere':\n",
    "            # create normalizer\n",
    "            self.normalizer, self.inverse_normalizer = self.PCA_sphereing(x)\n",
    "        \n",
    "        # use ZCA sphereing\n",
    "        elif name == 'ZCA_sphere':\n",
    "            self.normalizer, self.inverse_normalizer = self.ZCA_sphereing(x)\n",
    "            \n",
    "        else:\n",
    "            self.normalizer = lambda data: data\n",
    "            self.inverse_normalizer = lambda data: data\n",
    "            \n",
    "    # standard normalization function \n",
    "    def standard_normalizer(self,x):\n",
    "        # compute the mean and standard deviation of the input\n",
    "        x_means = np.mean(x,axis = 1)[:,np.newaxis]\n",
    "        x_stds = np.std(x,axis = 1)[:,np.newaxis]   \n",
    "        \n",
    "        # check to make sure thta x_stds > small threshold, for those not\n",
    "        # divide by 1 instead of original standard deviation\n",
    "        ind = np.argwhere(x_stds < 10**(-2))\n",
    "        if len(ind) > 0:\n",
    "            ind = [v[0] for v in ind]\n",
    "            adjust = np.zeros((x_stds.shape))\n",
    "            adjust[ind] = 1.0\n",
    "            x_stds += adjust\n",
    "\n",
    "        # create standard normalizer function\n",
    "        normalizer = lambda data: (data - x_means)/x_stds\n",
    "\n",
    "        # create inverse standard normalizer\n",
    "        inverse_normalizer = lambda data: data*x_stds + x_means\n",
    "\n",
    "        # return normalizer \n",
    "        return normalizer,inverse_normalizer\n",
    "\n",
    "    # compute eigendecomposition of data covariance matrix for PCA transformation\n",
    "    def PCA(self,x,**kwargs):\n",
    "        # regularization parameter for numerical stability\n",
    "        lam = 10**(-7)\n",
    "        if 'lam' in kwargs:\n",
    "            lam = kwargs['lam']\n",
    "\n",
    "        # create the correlation matrix\n",
    "        P = float(x.shape[1])\n",
    "        Cov = 1/P*np.dot(x,x.T) + lam*np.eye(x.shape[0])\n",
    "\n",
    "        # use numpy function to compute eigenvalues / vectors of correlation matrix\n",
    "        d,V = np.linalg.eigh(Cov)\n",
    "        return d,V\n",
    "\n",
    "    # PCA-sphereing - use PCA to normalize input features\n",
    "    def PCA_sphereing(self,x,**kwargs):\n",
    "        # Step 1: mean-center the data\n",
    "        x_means = np.mean(x,axis = 1)[:,np.newaxis]\n",
    "        x_centered = x - x_means\n",
    "\n",
    "        # Step 2: compute pca transform on mean-centered data\n",
    "        d,V = self.PCA(x_centered,**kwargs)\n",
    "\n",
    "        # Step 3: divide off standard deviation of each (transformed) input, \n",
    "        # which are equal to the returned eigenvalues in 'd'.  \n",
    "        stds = (d[:,np.newaxis])**(0.5)\n",
    "        \n",
    "        # check to make sure thta x_stds > small threshold, for those not\n",
    "        # divide by 1 instead of original standard deviation\n",
    "        ind = np.argwhere(stds < 10**(-2))\n",
    "        if len(ind) > 0:\n",
    "            ind = [v[0] for v in ind]\n",
    "            adjust = np.zeros((stds.shape))\n",
    "            adjust[ind] = 1.0\n",
    "            stds += adjust\n",
    "        \n",
    "        normalizer = lambda data: np.dot(V.T,data - x_means)/stds\n",
    "\n",
    "        # create inverse normalizer\n",
    "        inverse_normalizer = lambda data: np.dot(V,data*stds) + x_means\n",
    "\n",
    "        # return normalizer \n",
    "        return normalizer,inverse_normalizer\n",
    "    \n",
    "    \n",
    "    # ZCA-sphereing - use ZCA to normalize input features\n",
    "    def ZCA_sphereing(self,x,**kwargs):\n",
    "        # Step 1: mean-center the data\n",
    "        x_means = np.mean(x,axis = 1)[:,np.newaxis]\n",
    "        x_centered = x - x_means\n",
    "\n",
    "        # Step 2: compute pca transform on mean-centered data\n",
    "        d,V = self.PCA(x_centered,**kwargs)\n",
    "\n",
    "        # Step 3: divide off standard deviation of each (transformed) input, \n",
    "        # which are equal to the returned eigenvalues in 'd'.  \n",
    "        stds = (d[:,np.newaxis])**(0.5)\n",
    "        \n",
    "        # check to make sure thta x_stds > small threshold, for those not\n",
    "        # divide by 1 instead of original standard deviation\n",
    "        ind = np.argwhere(stds < 10**(-2))\n",
    "        if len(ind) > 0:\n",
    "            ind = [v[0] for v in ind]\n",
    "            adjust = np.zeros((stds.shape))\n",
    "            adjust[ind] = 1.0\n",
    "            stds += adjust\n",
    "             \n",
    "        normalizer = lambda data: np.dot(V, np.dot(V.T,data - x_means)/stds)\n",
    "\n",
    "        # create inverse normalizer\n",
    "        inverse_normalizer = lambda data: np.dot(V,np.dot(V.T,data)*stds) + x_means\n",
    "\n",
    "        # return normalizer \n",
    "        return normalizer,inverse_normalizer"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
